# -*- coding: utf-8 -*-
"""web_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4_vMTsa8r2vHg67UJQxT6GQ9zOVh1ON
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression
from sklearn.metrics import classification_report, mean_squared_error
from sklearn.preprocessing import LabelEncoder

# App title
st.title("Data Cleaning and Machine Learning App")

# Sidebar options
st.sidebar.title("Options")
uploaded_file = st.sidebar.file_uploader("Upload a dataset (CSV or Excel)", type=["csv", "xlsx"])

if uploaded_file:
    # Load dataset
    file_extension = uploaded_file.name.split('.')[-1]
    if file_extension == "csv":
        df = pd.read_csv(uploaded_file)
    elif file_extension == "xlsx":
        df = pd.read_excel(uploaded_file)

    st.write("### Original Dataset")
    st.dataframe(df.head())

    # Data Cleaning
    st.sidebar.subheader("Data Cleaning Options")

    # Handle missing values
    if st.sidebar.checkbox("Remove missing values"):
        df = df.dropna()
        st.write("### Dataset After Removing Missing Values")
        st.dataframe(df.head())

    # Drop duplicate rows
    if st.sidebar.checkbox("Remove duplicate rows"):
        df = df.drop_duplicates()
        st.write("### Dataset After Removing Duplicates")
        st.dataframe(df.head())

    # Label encoding for categorical columns
    if st.sidebar.checkbox("Encode categorical variables"):
        label_encoders = {}
        for col in df.select_dtypes(include=['object']).columns:
            le = LabelEncoder()
            df[col] = le.fit_transform(df[col])
            label_encoders[col] = le
        st.write("### Dataset After Encoding Categorical Variables")
        st.dataframe(df.head())

    # Machine Learning
    st.sidebar.subheader("Machine Learning Options")
    target_column = st.sidebar.selectbox("Select Target Column", df.columns)
    model_type = st.sidebar.radio("Select Model Type", ["Classification", "Regression"])

    if target_column and st.sidebar.button("Train Model"):
        # Splitting the dataset
        X = df.drop(columns=[target_column])
        y = df[target_column]

        # Handle non-numeric features in X
        X = pd.get_dummies(X, drop_first=True)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Train the chosen model
        if model_type == "Classification":
            model = RandomForestClassifier(random_state=42)
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            # Display results
            st.write("### Classification Report")
            st.text(classification_report(y_test, y_pred))
        elif model_type == "Regression":
            model = LinearRegression()
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            # Display results
            st.write("### Regression Metrics")
            mse = mean_squared_error(y_test, y_pred)
            st.write(f"Mean Squared Error: {mse}")

        st.write("### Feature Importance" if model_type == "Classification" else "### Model Coefficients")
        st.dataframe(pd.DataFrame({
            "Feature": X.columns,
            "Importance": model.feature_importances_ if model_type == "Classification" else model.coef_
        }).sort_values(by="Importance", ascending=False))

else:
    st.write("### Please upload a dataset to begin.")